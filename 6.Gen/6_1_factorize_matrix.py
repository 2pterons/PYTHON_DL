# -*- coding: utf-8 -*-
"""6-1.factorize_matrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dqm-3lgl33d0ghIRwjgEAPNzXuuF9YOo
"""

# 행렬 분해 : R = P * Q.T
# NaN이 포함된 R이 주어졌을 때 P, Q를 추정한다.
# by Keras
# -------------------------------------------
import numpy as np
import pandas as pd
from tensorflow.keras.layers import Input, Dense, Dropout, Flatten, Dot
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

# User-item matrix
N = np.NaN
R = np.array([[4, N, N, 2, N],
              [N, 5, N, 3, 1],
              [N, N, 3, 4, 4],
              [5, 2, 1, 2, N]])

n_users = R.shape[0]
n_items = R.shape[1]
n_factors = 2

# unpivoting
user_item = pd.DataFrame(R).stack().reset_index()
user_item.columns = ['user', 'item', 'rating']

user_item

x_user = to_categorical(np.array(user_item['user']))
x_item = to_categorical(np.array(user_item['item']))
y_rating = np.array(user_item['rating']).reshape(-1, 1)

x_user

x_input_user = Input(batch_shape = (None, x_user.shape[1]))
x_input_item = Input(batch_shape = (None, x_item.shape[1]))

x_user_p = Dense(n_factors)(x_input_user)
x_item_q = Dense(n_factors)(x_input_item)

y_output = Dot(axes=1)([x_user_p, x_item_q])

model = Model([x_input_user, x_input_item], y_output)
model.compile(loss='mse', optimizer = Adam(learning_rate=0.01))

model_p = Model([x_input_user, x_input_item], x_user_p)
model_q = Model([x_input_user, x_input_item], x_item_q)
# model.summary()

hist = model.fit([x_user, x_item], y_rating, epochs = 500)

y_pred = model.predict([x_user, x_item])

user_item['y_pred'] = y_pred
user_item

# user-item의 전체 조합을 생성한다
users = np.arange(n_users)
items = np.arange(n_items)

x_tot = np.array([(x, y) for x in users for y in items])
x_tot_user = x_tot[:, 0]
x_tot_item = x_tot[:, 1]

# user-item의 전체 조합에 대해 expected rating을 추정한다.
x_cat_user = to_categorical(x_tot_user)
x_cat_item = to_categorical(x_tot_item)

y_pred = model.predict([x_cat_user, x_cat_item])

df = pd.DataFrame([x_tot_user, x_tot_item, y_pred.reshape(-1)]).T
df.columns = ['user', 'item', 'rating']

ER = np.array(df.pivot_table('rating', index='user', columns='item'))

ER.round(2)

R

# 행렬 P, Q를 확인한다.
P = model_p.predict([x_cat_user, x_cat_item])
Q = model_q.predict([x_cat_user, x_cat_item])

P.round(2)

Q.T.round(2)

